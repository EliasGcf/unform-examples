{"version":3,"sources":["assets/logo-unform.svg","components/Form/react-select/SelectInput/index.tsx","components/Form/react-select/AsyncSelectInput/index.tsx","components/Button/styles.ts","components/Button/index.tsx","services/api.ts","pages/ReactSelect/styles.ts","pages/ReactSelect/index.tsx","pages/_layouts/default/styles.ts","pages/_layouts/default/index.tsx","routes/Route.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","SelectInput","name","rest","selectRef","useRef","useField","fieldName","defaultValue","registerField","colourStyles","control","styles","borderRadius","borderColor","fontSize","height","option","styels","color","useEffect","ref","current","getValue","isMulti","state","value","map","setValue","clearValue","classNamePrefix","theme","colors","primary","neutral0","primary25","primary50","neutral80","neutral30","maxMenuHeight","AsyncSelect","marginTop","select","cacheOptions","ButtonContainer","styled","button","Button","children","api","axios","create","baseURL","UnForm","Form","ReactSelect","formRef","useState","searchOption","setSearchOption","loading","setLoading","page","setPage","repositorySelected","setRepositorySelected","reposOptions","setReposOptions","toggleOption","useCallback","clearField","loadOptions","inputValue","callback","filter","repo","label","includes","handleRepositoryChange","data","handleLoadPage","a","get","params","response","length","full_name","Error","window","alert","message","handleSubmit","open","loadRepos","onSubmit","onChange","options","AsyncSelectInput","isLoading","defaultOptions","onMenuScrollToBottom","type","Container","div","Wrapper","Unform","DefaultLayout","history","useHistory","location","useLocation","inputOptions","defaultInput","find","pathname","replace","handleInputOptions","push","input","src","unformLogo","alt","Route","Component","component","Layout","render","Routes","path","exact","createGlobalStyle","App","basename","process","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b64e2ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-unform.5ab9ac7c.svg\";","import React, { useRef, useEffect } from 'react';\nimport ReactSelect, {\n  OptionTypeBase,\n  Props as SelectProps,\n  StylesConfig,\n  Theme,\n} from 'react-select';\nimport { useField } from '@unform/core';\n\ninterface Props extends SelectProps<OptionTypeBase> {\n  name: string;\n}\n\nconst SelectInput: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField } = useField(name);\n\n  const colourStyles: StylesConfig = {\n    control: styles => ({\n      ...styles,\n      borderRadius: 10,\n      borderColor: '#232129',\n      fontSize: 18,\n      height: 46,\n    }),\n    option: styels => ({\n      ...styels,\n      color: '#F4EDE8',\n    }),\n  };\n\n  const themeProps = (theme: Theme): Theme => {\n    return {\n      ...theme,\n      colors: {\n        ...theme.colors,\n        primary: '#666360',\n        neutral0: '#232129',\n        primary25: '#666360',\n        primary50: '#999591',\n        neutral80: '#F4EDE8',\n        neutral30: '#FBC131',\n      },\n    };\n  };\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.state.value) {\n            return [];\n          }\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\n        }\n        if (!ref.state.value) {\n          return '';\n        }\n        return ref.state.value.value;\n      },\n      setValue: (ref: any, value: any) => {\n        ref.state.value = value;\n      },\n      clearValue: (ref: any) => {\n        ref.state.value = null;\n      },\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <ReactSelect\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      styles={colourStyles}\n      theme={themeProps}\n      maxMenuHeight={250}\n      {...rest}\n    />\n  );\n};\n\nexport default SelectInput;\n","import React, { useRef, useEffect } from 'react';\nimport { OptionTypeBase, StylesConfig, Theme } from 'react-select';\nimport Select, { Props as AsyncProps } from 'react-select/async';\nimport { useField } from '@unform/core';\n\ninterface Props extends AsyncProps<OptionTypeBase> {\n  name: string;\n}\n\nconst AsyncSelect: React.FC<Props> = ({ name, ...rest }) => {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField } = useField(name);\n\n  const colourStyles: StylesConfig = {\n    control: styles => ({\n      ...styles,\n      marginTop: 8,\n      borderRadius: 10,\n      borderColor: '#232129',\n      fontSize: 18,\n      height: 46,\n    }),\n    option: styels => ({\n      ...styels,\n      color: '#F4EDE8',\n    }),\n  };\n\n  const themeProps = (theme: Theme): Theme => {\n    return {\n      ...theme,\n      colors: {\n        ...theme.colors,\n        primary: '#666360',\n        primary25: '#666360',\n        primary50: '#999591',\n        neutral0: '#232129',\n        neutral80: '#F4EDE8',\n        neutral30: '#FBC131',\n      },\n    };\n  };\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n\n          return ref.select.state.value.map(\n            (option: OptionTypeBase) => option.value,\n          );\n        }\n        if (!ref.select.state.value) {\n          return '';\n        }\n\n        return ref.select.state.value.value;\n      },\n      setValue: (ref: any, value: any) => {\n        ref.select.state.value = value;\n      },\n      clearValue: (ref: any) => {\n        ref.select.state.value = null;\n      },\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Select\n      cacheOptions\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      theme={themeProps}\n      maxMenuHeight={250}\n      styles={colourStyles}\n      {...rest}\n    />\n  );\n};\n\nexport default AsyncSelect;\n","import styled from 'styled-components';\n\nexport const ButtonContainer = styled.button`\n  height: 40px;\n  width: 100%;\n  background: #fbc131;\n  padding: 0px 16px;\n  border-radius: 10px;\n  border: none;\n  font-size: 18px;\n  font-weight: 500;\n  margin-top: 16px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  cursor: pointer;\n\n  transition: background 0.3s;\n\n  :hover {\n    background: #cc9d29;\n  }\n`;\n","import React, { ButtonHTMLAttributes } from 'react';\n\nimport { ButtonContainer } from './styles';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: React.FC<ButtonProps> = ({ children, ...rest }) => {\n  return <ButtonContainer {...rest}>{children}</ButtonContainer>;\n};\n\nexport default Button;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled from 'styled-components';\nimport { Form } from '@unform/web';\n\nexport const UnForm = styled(Form)`\n  padding: 24px;\n  border-radius: 10px;\n  background: #3e3b47;\n`;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { FormHandles } from '@unform/core';\n\nimport { SelectInput, AsyncSelectInput } from '../../components/Form';\nimport Button from '../../components/Button';\nimport api from '../../services/api';\n\nimport { UnForm } from './styles';\n\ninterface ReposOptions {\n  value: string;\n  label: string;\n}\n\ninterface Repo {\n  name: string;\n  full_name: string;\n}\n\ninterface LoadOptionsCallback {\n  (repos: ReposOptions[]): void;\n}\n\ninterface SelectFormData {\n  name: string;\n  repo: string;\n}\n\nconst ReactSelect: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const [searchOption, setSearchOption] = useState('repos');\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [repositorySelected, setRepositorySelected] = useState<string>('');\n  const [reposOptions, setReposOptions] = useState<ReposOptions[]>([]);\n\n  const optionsSelect = [\n    { value: 'repos', label: 'Owner' },\n    { value: 'starred', label: 'Starred' },\n  ];\n\n  const toggleOption = useCallback(() => {\n    setLoading(true);\n    setSearchOption(state => (state === 'repos' ? 'starred' : 'repos'));\n    setRepositorySelected('');\n    formRef.current?.clearField('repo');\n  }, []);\n\n  const loadOptions = useCallback(\n    (inputValue: string, callback: LoadOptionsCallback) => {\n      const data = reposOptions.filter(repo => repo.label.includes(inputValue));\n\n      callback(data);\n    },\n    [reposOptions],\n  );\n\n  const handleRepositoryChange = useCallback(data => {\n    setRepositorySelected(data.value);\n  }, []);\n\n  const handleLoadPage = useCallback(async () => {\n    try {\n      const response = await api.get<Repo[]>(\n        `/users/EliasGcf/${searchOption}`,\n        {\n          params: {\n            page: page + 1,\n          },\n        },\n      );\n\n      if (response.data.length !== 0) {\n        const data = response.data.map(repo => ({\n          label: repo.name,\n          value: repo.full_name,\n        }));\n\n        setReposOptions(state => [...state, ...data]);\n        setPage(page + 1);\n      } else {\n        throw new Error('No more repos to loading');\n      }\n    } catch (err) {\n      window.alert(err.message);\n    }\n  }, [searchOption, page]);\n\n  const handleSubmit = useCallback((data: SelectFormData) => {\n    if (data.repo) {\n      window.open(`https://github.com/${data.repo}`);\n    }\n  }, []);\n\n  useEffect(() => {\n    async function loadRepos() {\n      const response = await api.get<Repo[]>(`/users/EliasGcf/${searchOption}`);\n\n      const data = response.data.map(repo => ({\n        label: repo.name,\n        value: repo.full_name,\n      }));\n\n      setReposOptions(data);\n      setLoading(false);\n    }\n\n    loadRepos();\n  }, [searchOption]);\n\n  return (\n    <UnForm ref={formRef} onSubmit={handleSubmit}>\n      <SelectInput\n        name=\"name\"\n        defaultValue={{ value: 'repos', label: 'Owner' }}\n        onChange={toggleOption}\n        options={optionsSelect}\n      />\n      <AsyncSelectInput\n        name=\"repo\"\n        isLoading={loading}\n        defaultOptions={reposOptions}\n        loadOptions={loadOptions}\n        onChange={handleRepositoryChange}\n        onMenuScrollToBottom={handleLoadPage}\n      />\n\n      <Button type=\"submit\">{`Open ${repositorySelected}`}</Button>\n    </UnForm>\n  );\n};\n\nexport default ReactSelect;\n","import styled from 'styled-components';\nimport { Form as Unform } from '@unform/web';\n\nexport const Container = styled.div`\n  height: 100vh;\n\n  > h1 {\n    font-size: 24px;\n    color: #fff;\n    margin-bottom: 16px;\n  }\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n\n  img {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  max-width: 450px;\n  width: 100%;\n`;\n\nexport const Form = styled(Unform)`\n  max-width: 450px;\n  width: 100%;\n\n  margin-bottom: 40px;\n`;\n","import React, { useCallback } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport unformLogo from '../../../assets/logo-unform.svg';\n\nimport { SelectInput } from '../../../components/Form';\nimport Button from '../../../components/Button';\n\nimport { Container, Wrapper, Form } from './styles';\n\ninterface InputOptionsData {\n  value: string;\n  label: string;\n}\n\ninterface FormData {\n  input: string;\n}\n\nconst DefaultLayout: React.FC = ({ children }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const inputOptions: InputOptionsData[] = [\n    { value: 'react-select', label: 'React Select' },\n  ];\n\n  const defaultInput = inputOptions.find(\n    option => option.value === location.pathname.replace('/', ''),\n  );\n\n  const handleInputOptions = useCallback(\n    value => {\n      history.push(`/${value.value}`);\n    },\n    [history],\n  );\n\n  const handleSubmit = useCallback(({ input }: FormData) => {\n    if (!input) return;\n\n    window.open(\n      `https://github.com/EliasGcf/unform-examples/tree/master/src/components/${input}`,\n    );\n  }, []);\n\n  return (\n    <Container>\n      <img src={unformLogo} alt=\"Logo unForm\" />\n\n      <h1>Inputs examples with Unform</h1>\n\n      <Form onSubmit={handleSubmit}>\n        <SelectInput\n          onChange={handleInputOptions}\n          options={inputOptions}\n          defaultValue={defaultInput}\n          name=\"input\"\n        />\n\n        <Button type=\"submit\">Open code on GitHub</Button>\n      </Form>\n\n      <Wrapper>{children}</Wrapper>\n    </Container>\n  );\n};\n\nexport default DefaultLayout;\n","import React from 'react';\nimport {\n  RouteProps as ReactDOMRouteProps,\n  Route as ReactDOMRoute,\n} from 'react-router-dom';\n\nimport DefaultLayout from '../pages/_layouts/default';\n\ninterface RouteProps extends ReactDOMRouteProps {\n  component: React.ComponentType;\n}\n\nconst Route: React.FC<RouteProps> = ({ component: Component, ...rest }) => {\n  const Layout = DefaultLayout;\n\n  return (\n    <ReactDOMRoute\n      {...rest}\n      render={() => {\n        return (\n          <Layout>\n            <Component />\n          </Layout>\n        );\n      }}\n    />\n  );\n};\n\nexport default Route;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport ReactSelect from '../pages/ReactSelect';\n\nimport Route from './Route';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={() => null} />\n    <Route path=\"/react-select\" component={ReactSelect} />\n  </Switch>\n);\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #7159c1;\n    color: #000;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font-family: 'Roboto', sans-serif;\n    font-size: 16px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <GlobalStyle />\n      <Routes />\n    </BrowserRouter>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}